header packets_t {
    bit<32> pkt_0;
    bit<32> pkt_1;
    bit<32> pkt_2;
    bit<32> pkt_3;
    bit<32> pkt_4;
    bit<32> pkt_5;
    bit<32> pkt_6;
    bit<32> pkt_7;
    bit<32> pkt_8;
    bit<32> pkt_9;
    bit<32> pkt_10;
    bit<32> pkt_11;
    bit<32> pkt_12;
    bit<32> pkt_13;
}
struct headers {
    packets_t  pkts;
}
control ingress(inout headers hdr,
                  inout metadata meta,
                  inout standard_metadata_t standard_metadata) {

    action A1() {
        hdr.pkts.pkt_0 = 1;   // ALU1
        hdr.pkts.pkt_1 = hdr.pkts.pkt_2 // ALU2
        hdr.pkts.pkt_3 = hdr.pkts.pkt_4 // ALU3
    }
    action A2() {
        hdr.pkts.pkt_5 = 1; // ALU1
        hdr.pkts.pkt_6 = 5; // ALU2
    }
    table validate_outer_ipv4_packet {
        actions = {
            A1;
            A2;
        }
        key = {
            hdr.pkts.pkt_7       : exact;
            hdr.pkts.pkt_8       : exact;
            hdr.pkts.pkt_9       : exact;
        }
        size = 512;
    }

    action A1() {
        @atomic {
            bit<32> s0_tmp;
            s0.read(s0_tmp, 0);
            hdr.pkts.pkt_12 = hdr.pkts.pkt_10 + hdr.pkts.pkt_11;
            if (hdr.pkts.pkt_10 == 102) {
                s0_tmp = 1;
            } else { 
                if (hdr.pkts.pkt_11 == 102) {
                    hdr.pkts.pkt_13 = (s0_tmp == 0);
                }
            }
            s0.write(0, s0_tmp);
        }
    }
    table T2 {
        actions = {
            A1;
        }
        key = {
            hdr.pkts.pkt_0 : exact;
        }
        size = 1;
    }

    apply {
        T1.apply();
        T2.apply();
    }
}

'''
Match dependency: validate_outer_ipv4_packet (T1) vs stateful_fw_T (T2)
'''